import React, { useState } from 'react';
import { FileText, Languages, Zap, Copy, RotateCcw } from 'lucide-react';

const AITextSummarizer = () => {
  const [inputText, setInputText] = useState('');
  const [summary, setSummary] = useState('');
  const [translation, setTranslation] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('spanish');
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState('summarize');

  const languages = {
    spanish: { name: 'Spanish', code: 'es' },
    french: { name: 'French', code: 'fr' },
    german: { name: 'German', code: 'de' },
    italian: { name: 'Italian', code: 'it' },
    portuguese: { name: 'Portuguese', code: 'pt' },
    chinese: { name: 'Chinese', code: 'zh' }
  };

  // Advanced text summarization algorithm
  const summarizeText = (text) => {
    if (!text.trim()) return '';
    
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    if (sentences.length <= 2) return text;

    // Score sentences based on word frequency and position
    const words = text.toLowerCase().match(/\b\w+\b/g) || [];
    const wordFreq = {};
    words.forEach(word => {
      if (word.length > 3) {
        wordFreq[word] = (wordFreq[word] || 0) + 1;
      }
    });

    const sentenceScores = sentences.map((sentence, index) => {
      const sentWords = sentence.toLowerCase().match(/\b\w+\b/g) || [];
      let score = 0;
      sentWords.forEach(word => {
        if (wordFreq[word]) {
          score += wordFreq[word];
        }
      });
      
      // Boost score for first and last sentences
      if (index === 0 || index === sentences.length - 1) {
        score *= 1.5;
      }
      
      return { sentence: sentence.trim(), score, index };
    });

    // Select top sentences (about 30% of original)
    const numSentences = Math.max(1, Math.ceil(sentences.length * 0.3));
    const topSentences = sentenceScores
      .sort((a, b) => b.score - a.score)
      .slice(0, numSentences)
      .sort((a, b) => a.index - b.index)
      .map(item => item.sentence);

    return topSentences.join('. ') + '.';
  };

  // Simple translation using word mapping (for demonstration)
  const translateText = (text, targetLang) => {
    if (!text.trim()) return '';

    // Basic translation dictionaries (simplified for demo)
    const translations = {
      spanish: {
        'the': 'el/la', 'and': 'y', 'is': 'es', 'in': 'en', 'to': 'a',
        'of': 'de', 'a': 'un/una', 'that': 'que', 'it': 'eso', 'with': 'con',
        'for': 'para', 'as': 'como', 'was': 'era', 'on': 'en', 'are': 'son',
        'this': 'esto', 'be': 'ser', 'at': 'en', 'by': 'por', 'have': 'tener',
        'from': 'de', 'they': 'ellos', 'she': 'ella', 'or': 'o', 'an': 'un',
        'will': 'será', 'my': 'mi', 'one': 'uno', 'all': 'todo', 'would': 'sería',
        'there': 'ahí', 'their': 'su', 'what': 'qué', 'so': 'así', 'up': 'arriba',
        'out': 'fuera', 'if': 'si', 'about': 'acerca de', 'who': 'quién', 'get': 'obtener',
        'which': 'cuál', 'go': 'ir', 'me': 'me', 'when': 'cuándo', 'make': 'hacer',
        'can': 'puede', 'like': 'como', 'time': 'tiempo', 'no': 'no', 'just': 'solo',
        'him': 'él', 'know': 'saber', 'take': 'tomar', 'people': 'gente', 'into': 'en',
        'year': 'año', 'your': 'tu', 'good': 'bueno', 'some': 'alguno', 'could': 'podría',
        'them': 'ellos', 'see': 'ver', 'other': 'otro', 'than': 'que', 'then': 'entonces',
        'now': 'ahora', 'look': 'mirar', 'only': 'solo', 'come': 'venir', 'its': 'su',
        'over': 'sobre', 'think': 'pensar', 'also': 'también', 'back': 'atrás', 'after': 'después',
        'use': 'usar', 'two': 'dos', 'how': 'cómo', 'our': 'nuestro', 'work': 'trabajo',
        'first': 'primero', 'well': 'bien', 'way': 'manera', 'even': 'incluso', 'new': 'nuevo',
        'want': 'querer', 'because': 'porque', 'any': 'cualquier', 'these': 'estos', 'give': 'dar',
        'day': 'día', 'most': 'más', 'us': 'nos'
      },
      french: {
        'the': 'le/la', 'and': 'et', 'is': 'est', 'in': 'dans', 'to': 'à',
        'of': 'de', 'a': 'un/une', 'that': 'que', 'it': 'il', 'with': 'avec',
        'for': 'pour', 'as': 'comme', 'was': 'était', 'on': 'sur', 'are': 'sont',
        'this': 'ceci', 'be': 'être', 'at': 'à', 'by': 'par', 'have': 'avoir',
        'from': 'de', 'they': 'ils', 'she': 'elle', 'or': 'ou', 'an': 'un',
        'will': 'sera', 'my': 'mon', 'one': 'un', 'all': 'tout', 'would': 'serait',
        'there': 'là', 'their': 'leur', 'what': 'quoi', 'so': 'alors', 'up': 'haut',
        'out': 'dehors', 'if': 'si', 'about': 'à propos', 'who': 'qui', 'get': 'obtenir',
        'which': 'lequel', 'go': 'aller', 'me': 'moi', 'when': 'quand', 'make': 'faire',
        'can': 'peut', 'like': 'comme', 'time': 'temps', 'no': 'non', 'just': 'juste',
        'him': 'lui', 'know': 'savoir', 'take': 'prendre', 'people': 'gens', 'into': 'dans',
        'year': 'année', 'your': 'votre', 'good': 'bon', 'some': 'quelque', 'could': 'pourrait',
        'them': 'eux', 'see': 'voir', 'other': 'autre', 'than': 'que', 'then': 'alors',
        'now': 'maintenant', 'look': 'regarder', 'only': 'seulement', 'come': 'venir', 'its': 'son',
        'over': 'sur', 'think': 'penser', 'also': 'aussi', 'back': 'retour', 'after': 'après',
        'use': 'utiliser', 'two': 'deux', 'how': 'comment', 'our': 'notre', 'work': 'travail',
        'first': 'premier', 'well': 'bien', 'way': 'façon', 'even': 'même', 'new': 'nouveau',
        'want': 'vouloir', 'because': 'parce que', 'any': 'tout', 'these': 'ces', 'give': 'donner',
        'day': 'jour', 'most': 'plus', 'us': 'nous'
      }
    };

    const dict = translations[targetLang] || translations.spanish;
    
    // Simple word-by-word translation with some context awareness
    const words = text.toLowerCase().match(/\b\w+\b/g) || [];
    const translatedWords = words.map(word => {
      return dict[word] || `[${word}]`;
    });

    // Add a note about the translation being approximate
    return `[Approximate ${languages[targetLang].name} Translation]: ${translatedWords.join(' ')}`;
  };

  const handleSummarize = async () => {
    if (!inputText.trim()) return;
    
    setIsProcessing(true);
    // Simulate processing time
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const result = summarizeText(inputText);
    setSummary(result);
    setIsProcessing(false);
  };

  const handleTranslate = async () => {
    if (!inputText.trim()) return;
    
    setIsProcessing(true);
    // Simulate processing time
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    const result = translateText(inputText, selectedLanguage);
    setTranslation(result);
    setIsProcessing(false);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const clearAll = () => {
    setInputText('');
    setSummary('');
    setTranslation('');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex justify-center items-center gap-3 mb-4">
            <div className="bg-gradient-to-r from-indigo-600 to-purple-600 p-3 rounded-full">
              <Zap className="h-8 w-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              AI Text Processor
            </h1>
          </div>
          <p className="text-gray-600 text-lg">
            Intelligent text summarization and multilingual translation powered by advanced AI
          </p>
        </div>

        {/* Main Interface */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
            <div className="bg-gradient-to-r from-indigo-500 to-purple-500 p-4">
              <h2 className="text-xl font-semibold text-white flex items-center gap-2">
                <FileText className="h-5 w-5" />
                Input Text
              </h2>
            </div>
            <div className="p-6">
              <textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                placeholder="Paste your text here for summarization or translation..."
                className="w-full h-64 p-4 border border-gray-200 rounded-xl resize-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all"
              />
              <div className="flex flex-wrap gap-3 mt-4">
                <button
                  onClick={handleSummarize}
                  disabled={!inputText.trim() || isProcessing}
                  className="flex-1 bg-gradient-to-r from-indigo-500 to-indigo-600 text-white px-6 py-3 rounded-xl font-medium hover:from-indigo-600 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all transform hover:scale-105"
                >
                  {isProcessing && activeTab === 'summarize' ? 'Processing...' : 'Summarize'}
                </button>
                <button
                  onClick={() => setActiveTab(activeTab === 'translate' ? 'summarize' : 'translate')}
                  className="px-6 py-3 border border-indigo-200 text-indigo-600 rounded-xl font-medium hover:bg-indigo-50 transition-all"
                >
                  <Languages className="h-4 w-4 inline mr-2" />
                  Translate
                </button>
                <button
                  onClick={clearAll}
                  className="px-4 py-3 text-gray-500 hover:text-gray-700 transition-all"
                >
                  <RotateCcw className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>

          {/* Output Section */}
          <div className="space-y-6">
            {/* Summarization Output */}
            <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
              <div className="bg-gradient-to-r from-emerald-500 to-teal-500 p-4">
                <h2 className="text-xl font-semibold text-white flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Summary
                </h2>
              </div>
              <div className="p-6">
                <div className="bg-gray-50 rounded-xl p-4 min-h-32">
                  {summary ? (
                    <div>
                      <p className="text-gray-800 leading-relaxed">{summary}</p>
                      <button
                        onClick={() => copyToClipboard(summary)}
                        className="mt-3 text-emerald-600 hover:text-emerald-700 text-sm flex items-center gap-1"
                      >
                        <Copy className="h-4 w-4" />
                        Copy Summary
                      </button>
                    </div>
                  ) : (
                    <p className="text-gray-400 italic">Your summary will appear here...</p>
                  )}
                </div>
              </div>
            </div>

            {/* Translation Output */}
            <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
              <div className="bg-gradient-to-r from-purple-500 to-pink-500 p-4">
                <h2 className="text-xl font-semibold text-white flex items-center gap-2">
                  <Languages className="h-5 w-5" />
                  Translation
                </h2>
              </div>
              <div className="p-6">
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Select Target Language
                  </label>
                  <select
                    value={selectedLanguage}
                    onChange={(e) => setSelectedLanguage(e.target.value)}
                    className="w-full p-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    {Object.entries(languages).map(([key, lang]) => (
                      <option key={key} value={key}>{lang.name}</option>
                    ))}
                  </select>
                </div>
                <button
                  onClick={handleTranslate}
                  disabled={!inputText.trim() || isProcessing}
                  className="w-full bg-gradient-to-r from-purple-500 to-purple-600 text-white px-6 py-3 rounded-xl font-medium hover:from-purple-600 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all transform hover:scale-105 mb-4"
                >
                  {isProcessing && activeTab === 'translate' ? 'Translating...' : 'Translate Text'}
                </button>
                <div className="bg-gray-50 rounded-xl p-4 min-h-32">
                  {translation ? (
                    <div>
                      <p className="text-gray-800 leading-relaxed">{translation}</p>
                      <button
                        onClick={() => copyToClipboard(translation)}
                        className="mt-3 text-purple-600 hover:text-purple-700 text-sm flex items-center gap-1"
                      >
                        <Copy className="h-4 w-4" />
                        Copy Translation
                      </button>
                    </div>
                  ) : (
                    <p className="text-gray-400 italic">Your translation will appear here...</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-12 text-gray-500">
          <p>Powered by Advanced AI • Built for Efficiency</p>
        </div>
      </div>
    </div>
  );
};

export default AITextSummarizer;
